#!/bin/sh

muttdir="$HOME/.config/mutt"		# Main mutt config location
accdir="$muttdir/accounts"		# Directory for account settings
maildir="$HOME/.local/share/mail"	# Location of mail storage
creddir="$HOME/.local/share/muttwizard"	# Location of encrypted credentials
bindir="$HOME/.config/mutt/bin"		# Location of scripts run by mutt or the wizard
namere="^[a-z_][a-z0-9_-]*$"		# Regex to ensure viable username
emailre=".\+@.\+\\..\+" 		# Regex to confirm valid email address
gpgemail="$(cat "$creddir/gpgemail" 2>&1)"	# Get previously set gpg email address
tmpdir="$(mktemp -d)"
GPG="gpg"; command -v gpg >/dev/null || GPG="gpg2"	# Ensure proper gpg command

mkdir -p "$maildir" "$creddir" "$bindir"

# Get certificate location depending on OS. Linux is elsewhere condition.
case "$(uname)" in
	"Darwin") sslcert="/usr/local/etc/openssl/cert.pem" ;;
	*) sslcert="/etc/ssl/certs/ca-certificates.crt" ;;
esac

getprofiles() { \
offlineimap_header="[general]
accounts =
starttls = yes
ssl = true
pythonfile = $bindir/imappwd.py

"
offlineimap_profile="
[Account $title]
localrepository = $title-local
remoterepository = $title-remote

[Repository $title-remote]
auth_mechanisms = LOGIN
type = $type
remoteuser = $login
remotepasseval = mailpasswd(\"$title\")
remoteport = $iport
sslline = $sslcert
$ifgoogleline

[Repository $title-local]
type = Maildir
localfolders = $maildir/$title
"

msmtp_header="defaults
auth	on
tls	on
tls_trust_file	$sslcert
logfile	~/.msmtp.log
"

msmtp_profile="

account $title
host $smtp
port $sport
from $login
user $login
passwordeval \"$GPG -d --quiet --for-your-eyes-only --no-tty $creddir/$title.gpg | sed -e '\$a\\'\"
"

mutt_profile="# vim: filetype=neomuttrc
# muttrc file for account $title
set realname = \"$realname\"
set from = \"$fulladdr\"
set sendmail = \"/usr/bin/msmtp -a $title\"
set folder = \"$maildir/$title\"
set header_cache = $accdir/$title/cache/headers
set message_cachedir = $accdir/$title/cache/bodies
set certificate_file = $accdir/$title/certificates
source \"$bindir/getmuttpass $title |\"

alias me $realname <$fulladdr>

set mbox_type = Maildir
set ssl_starttls = yes
set ssl_force_tls = yes

bind index,pager gg noop
bind index,pager g noop
bind index,pager M noop
bind index,pager C noop
bind index gg first-entry
unmailboxes *
"
}

userexit() { clear; exit ;}

addaccount() { \
	printf "Insert the \033[31memail address\033[0m that you want to autoconfigure for mutt/offlineIMAP\\n\\nEmail: "
	read -r fulladdr
	while ! echo "$fulladdr" | grep "$emailre" >/dev/null; do
		printf "That is not a valid \033[31memail address\033[0m, please retype the desired email.\\n\\nEmail: "
		read -r fulladdr
	done
	domain="$(echo "$fulladdr" | sed "s/.*@//")"
	printf "\\nSearching for \033[32m%s\033[0m in \033[34m\`domains.csv\`\033[0m..." "$domain"
	serverinfo="$(grep "$domain" "$muttdir/domains.csv")"
	if [ -z "$serverinfo" ]; then
		printf "Your email domain is not in mutt-wizard's database yet.\\nmutt-wizard will still autoconfigure everything, but you will have to manually type in your service's IMAP and SMTP server information.\\nYou can usually quickly find this by internet searching for it.\\n"
		printf "Insert the IMAP server for your email provider (excluding the port number)\\n"
		read -r imap
		printf "What is your server's IMAP port number? (Usually something like 993)\\n"
		read -r iport
		printf "Insert the SMTP server for your email provider (excluding the port number)\\n"
		read -r smtp
		printf "What is your server's SMTP port number? (Usually 587 or 465)\\n"
		read -r sport
		printf "\\nGreat! If you want to be helpful, copy the line below and you can add it to the \`domains.csv\` file on Github.\\nThis will make things easier for others who use your email provider.\\n\\n%s,%s,%s,%s,%s\\n\\nAlthough be sure to test to see if these settings work first! ;-)\\n" "$domain" "$imap" "$iport" "$smtp" "$sport"
	else
		IFS=, read service imap iport smtp sport <<EOF
$serverinfo
EOF
	printf "\\n\033[3;33mCongrats!\033[0m Server info has automatically be found, so you won't have to look anything up!\\n\t\033[1mIMAP server\033[0m: %s\\n\t\033[1mIMAP port\033[0m: %s\\n\t\033[1mSMTP server\033[0m: %s\\n\t\033[1mSMTP port\033[0m: %s\\nThis data will be used by the wizard.\\n" "$imap" "$iport" "$smtp" "$sport"
	fi
	printf "\\nPress enter to continue.\\n"
	stty -echo
	read wait
	stty echo
	printf "Enter the \033[35mfull name\033[0m you want to be identified by on this account.\\n\tReal name: "
	read -r realname
	printf "Enter a short, \033[36mone-word identifier\033[0m for this email account that will distinguish them from any other accounts you add.\\n\tAccount name: "
	read -r title
	while ! echo "$title" | grep "$namere" >/dev/null; do
		printf "\033[31mTry again\033[0m. Pick a nickname that is one word only including lowercase letters and _ or -.\\n\tAccount name: "
		read -r title
	done
	printf "If your account has a special username different from your address, insert it now. Otherwise leave this prompt totally blank.\\n\tLogin(?): "
	read -r login
	[ -z "$login" ] && login="$fulladdr"
	if [ "$service" = "gmail.com" ]; then
		type="Gmail"; ifgoogleline="folderfilter = lambda foldername: foldername not in ['[Gmail]/All Mail']"
		printf "\033[1mGoogle\033[0m mail account detected. Remember to check the README to make sure of Google-specific settings you must enable.\\n"
	else
		type="IMAP"; ifgoogleline="remotehost = $imap"
	fi
	grep "i[0-9]" "$muttdir/personal.muttrc" | awk '{print $3}' | sed -e 's/i//g' > "$tmpdir/mutt_used"
	printf "1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9" > "$tmpdir/mutt_all_possible"
	idnum=$(diff "$tmpdir/mutt_all_possible" "$tmpdir/mutt_used" | sed -n 2p | awk '{print $2}')
	getpass "$title" || userexit
	getprofiles
	mkdir -p "$HOME/.config/offlineimap/" "$HOME/.config/msmtp"
	[ ! -f "$HOME/.config/offlineimap/config" ] && echo "$offlineimap_header" > "$HOME/.config/offlineimap/config"
	[ ! -f "$HOME/.config/msmtp/config" ] && echo "$msmtp_header" > "$HOME/.config/msmtp/config"
	echo "$offlineimap_profile" >> "$HOME/.config/offlineimap/config"
	echo "$msmtp_profile" >> "$HOME/.config/msmtp/config"
	echo "$mutt_profile" > "$accdir/$title.muttrc"
}

getpass() { \
	printf "Now enter your password for the \"%s\" account. Don't worry, this will be encrypted and only you with your GPG key can view it.\\n\tPassword: " "$1"
	stty -echo
	read -r password
	stty echo
	echo "$password" > "$tmpdir/$1"
	printf "Encrypting your password with %s..."
	"$GPG" -r "$gpgemail" --encrypt "$tmpdir/$1"
	print "DONE\\nShredding all memory of your password for safety's sake..."
	unset password
	shred -u "$tmpdir/$1" | rm -f "$tmpdir/$1"
	mv "$tmpdir/$1.gpg" "$creddir"
	printf "DONE.\\n"
}

askgpg() { \
	printf "To safely encrypt passwords, mutt-wizard requires that you have a GPG public/private key pair.\\n\\nPlease input the email address of your GPG key pair below.\\nEmail: "
	read -r gpgemail
	while ! echo "$gpgemail" | grep "$emailre"; do
		printf "That is not a valud email address. Please try again.\\nEmail: "
		read -r gpgemail
	done
	if "$GPG" -K | grep "<$gpgemail>"; then
		echo "$gpgemail" > "$creddir/gpgemail"
	else
		printf "You do not appear to have a private key associated with %s.\\nPlease generate a GPG key pair by running \`%s --full-gen-key\` and rerun the wizard.\\n" "$gpgemail" "$GPG"
		exit 1
	fi
}

formatShortcut() { \
	while read data; do { echo "macro index,pager g$1 \"<change-folder>$data<enter>\" \"Go to $2.\" # autogenerated"
	echo "macro index,pager M$1 \"<save-message>$data<enter>\" \"Move mail to $2.\" # autogenerated"
	echo "macro index,pager C$1 \"<copy-message>$data<enter>\" \"Copy mail to $2.\" # autogenerated"; } >> "$muttdir/accounts/$3.muttrc"
	done ;}

gen_delim() { \
	delim="="
	for i in $(seq $(( $1 - 1 )))
	do
		delim="$delim-"
	done
	echo $delim ;}

detectMailboxes() { \
	ls -d "$maildir/$1/"* | sed "s/.*\///;s/^/=/" > "$tmpdir/$1_boxes"
	sidebar_width="$(sed -n -e '/^set sidebar_width/p' "$muttdir/muttrc" | awk -F'=' '{print $2}')"
	delim="$(gen_delim "$sidebar_width")"
	oneline="$(sed -e "s/^\|$/\"/g" "$tmpdir/$1_boxes" | tr "\n" " ")"
	oneline="=$1 $delim $oneline"
	sed -i "/^mailboxes\|^set record\|^set postponed\|^set trash\|^set spoolfile/d" "$muttdir/accounts/$1.muttrc"
	echo mailboxes "$oneline" >> "$muttdir/accounts/$1.muttrc"
	sed -i "/# autogenerated/d" "$muttdir/accounts/$1.muttrc"
	grep -i "$tmpdir/$1_boxes" -e inbox | sed 1q | formatShortcut i inbox "$1"
	grep -i "$tmpdir/$1_boxes" -e sent | sed 1q | formatShortcut s sent "$1"
	grep -i "$tmpdir/$1_boxes" -e draft | sed 1q | formatShortcut d drafts "$1"
	grep -i "$tmpdir/$1_boxes" -e trash | sed 1q | formatShortcut t trash "$1"
	grep -i "$tmpdir/$1_boxes" -e spam | sed 1q | formatShortcut S spam "$1"
	grep -i "$tmpdir/$1_boxes" -e junk | sed 1q | formatShortcut j junk "$1"
	grep -i "$tmpdir/$1_boxes" -e archive | sed 1q | formatShortcut a archive "$1"
	spoolfile=$(grep -i "$tmpdir/$1_boxes" -e inbox | sed -e 's/=/+/g' | sed 1q)
	record=$(grep -i "$tmpdir/$1_boxes" -e sent | sed -e 's/=/+/g' | sed 1q)
	postponed=$(grep -i "$tmpdir/$1_boxes" -e draft | sed -e 's/=/+/g' | sed 1q)
	trash=$(grep -i "$tmpdir/$1_boxes" -e trash | sed -e 's/=/+/g' | sed 1q)
	{ echo "set spoolfile = \"$spoolfile\""; echo "set record = \"$record\""; echo "set postponed = \"$postponed\""; echo "set trash = \"$trash\""; } >> "$muttdir/accounts/$1.muttrc"
}


#wipe () { rm "$HOME/.config/offlineimap/config" "$accdir" "$creddir" "$muttdir/personal.muttrc" ;}

[ -z "$gpgemail" ] && askgpg


main() { \
	while : ; do
	printf "What would you like \033[32mmutt-wizard\033[0m to do?
	\033[31m1 Add an email account\033[0m
	2 Autodetect mailboxes
	3 Change an account's password
	0 Exit
Input a number to continue or press ctrl-c.\\n"
	read -r choice
	case "$choice" in
		1) addaccount ;;
		0) break ;;
		*) printf "Invalid input.\\n"
	esac
done
}

main

rm -rf "$tmpdir"
